1. In Burp Suite, go to the Proxy tool and make sure that the Intercept feature is switched on. 

2. Back in the lab, go to the target website and use the search bar to search for a random test string, such as "XSS". 

3. Return to the Proxy tool in Burp Suite and forward the request. 

4. On the Intercept tab, notice that the string is reflected in a JSON response called search-results.

5. From the Site Map, open the searchResults.js file and notice that the JSON response is used with an eval() function call. 
	- Can also search page's javascript code in developer mode! Search for search.location
	- JSON response can be viewed at Site Map as it is the response to the XMLHttpRequest made by the page

6. By experimenting with different search strings, you can identify that the JSON response is escaping quotation marks. 
	- Can also realise this by setting a breakpoint at the eval() and examine the response of the XMLHttpRequest

7. However, backslash is not being escaped. To solve this lab, enter the following search term: \"-alert(1)}// 

Rationale behind the payload:
- As you have injected a backslash and the site isn't escaping them, when the JSON response attempts to escape the opening double-quotes character, it adds a second backslash. The resulting double-backslash causes the escaping to be effectively canceled out. This means that the double-quotes are processed unescaped, which closes the string that should contain the search term.

- An arithmetic operator (in this case the subtraction operator) is then used to separate the expressions before the alert() function is called. 

- Finally, a closing curly bracket and two forward slashes close the JSON object early and comment out what would have been the rest of the object. As a result, the response is generated as follows:

"{searchTerm:"\\"-alert(1)}//", "results"[]}"

- alert(1) is being executed by eval()

